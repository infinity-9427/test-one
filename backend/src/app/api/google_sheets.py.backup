"""
Google Sheets API endpoints for managing analysis data logging.
"""
from fastapi import APIRouter, HTTPException, BackgroundTasks
from pydantic import BaseModel
from typing import Dict, List, Any, Optional
import logging

from ..services.google_sheets import google_sheets_service

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/sheets", tags=["google-sheets"])


class SheetsHealthResponse(BaseModel):
    """Google Sheets service health response."""
    status: str
    error: Optional[str] = None
    details: Dict[str, Any]


class AnalysisHistoryResponse(BaseModel):
    """Analysis history response from Google Sheets."""
    records: List[Dict[str, Any]]
    count: int
    message: str


@router.get("/health", response_model=SheetsHealthResponse)
async def get_sheets_health():
    """
    Get Google Sheets service health status.
    
    Returns health information about the Google Sheets integration,
    including connection status and configuration details.
    """
    try:
        health_result = await google_sheets_service.health_check()
        
        return SheetsHealthResponse(
            status=health_result["status"],
            error=health_result.get("error"),
            details=health_result["details"]
        )
        
    except Exception as e:
        logger.error(f"Failed to check Google Sheets health: {e}")
        raise HTTPException(
            status_code=500,
            detail="Failed to check Google Sheets service health"
        )


@router.post("/initialize")
async def initialize_sheets_service():
    """
    Initialize the Google Sheets service with credentials.
    
    This endpoint should be called after configuring the credentials
    to establish the connection to Google Sheets.
    """
    try:
        success = await google_sheets_service.initialize()
        
        if success:
            return {
                "status": "success",
                "message": "Google Sheets service initialized successfully"
            }
        else:
            raise HTTPException(
                status_code=400,
                detail="Failed to initialize Google Sheets service. Please check credentials and configuration."
            )
            
    except Exception as e:
        logger.error(f"Failed to initialize Google Sheets service: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to initialize Google Sheets service: {str(e)}"
        )


@router.get("/history", response_model=AnalysisHistoryResponse)
async def get_analysis_history(limit: int = 50):
    """
    Retrieve analysis history from Google Sheets.
    
    Args:
        limit: Maximum number of records to retrieve (default: 50, max: 1000)
    """
    try:
        # Validate limit
        if limit < 1 or limit > 1000:
            raise HTTPException(
                status_code=400,
                detail="Limit must be between 1 and 1000"
            )
        
        records = await google_sheets_service.get_analysis_history(limit=limit)
        
        return AnalysisHistoryResponse(
            records=records,
            count=len(records),
            message=f"Retrieved {len(records)} analysis records"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to retrieve analysis history: {e}")
        raise HTTPException(
            status_code=500,
            detail="Failed to retrieve analysis history from Google Sheets"
        )


@router.post("/log/{analysis_id}")
async def log_analysis_to_sheets(
    analysis_id: str,
    background_tasks: BackgroundTasks
):
    """
    Manually log a specific analysis result to Google Sheets.
    
    This endpoint allows manual logging of analysis results that might
    have been missed during automatic logging.
    """
    try:
        # Import here to avoid circular imports
        from ..api.analysis import analysis_results
        
        if analysis_id not in analysis_results:
            raise HTTPException(
                status_code=404,
                detail=f"Analysis {analysis_id} not found"
            )
        
        result = analysis_results[analysis_id]
        
        if result.get("status") != "completed":
            raise HTTPException(
                status_code=400,
                detail=f"Analysis {analysis_id} is not completed yet"
            )
        
        # Log to Google Sheets in background
        background_tasks.add_task(
            _log_analysis_background,
            result
        )
        
        return {
            "status": "success",
            "message": f"Analysis {analysis_id} queued for logging to Google Sheets",
            "analysis_id": analysis_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to log analysis {analysis_id} to sheets: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to queue analysis for Google Sheets logging"
        )


async def _log_analysis_background(analysis_result: Dict[str, Any]):
    """Background task to log analysis result to Google Sheets."""
    try:
        success = await google_sheets_service.log_analysis_result(analysis_result)
        
        if success:
            logger.info(f"Successfully logged analysis {analysis_result.get('analysis_id')} to Google Sheets")
        else:
            logger.error(f"Failed to log analysis {analysis_result.get('analysis_id')} to Google Sheets")
            
    except Exception as e:
        logger.error(f"Background Google Sheets logging failed: {e}")


# Function to be called from analysis service
async def log_analysis_to_sheets_async(analysis_result: Dict[str, Any]) -> bool:
    """
    Asynchronously log analysis result to Google Sheets.
    
    This function is called from the analysis service to automatically
    log completed analysis results.
    
    Args:
        analysis_result: Complete analysis result dictionary
        
    Returns:
        bool: True if logged successfully, False otherwise
    """
    try:
        return await google_sheets_service.log_analysis_result(analysis_result)
    except Exception as e:
        logger.error(f"Failed to log analysis to Google Sheets: {e}")
        return False
